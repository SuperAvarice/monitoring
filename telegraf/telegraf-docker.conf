# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################


# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  # urls = ["unix:///var/run/influxdb.sock"]
  # urls = ["udp://127.0.0.1:8089"]
  urls = ["http://influxdb:8086"]

  ## The target database for metrics; will be created as needed.
  ## For UDP url endpoint database needs to be configured on server side.
  database = "telegraf_snmp"
  tagexclude = [ "influx_database" ]
  [outputs.influxdb.tagpass]
    influx_database = [ "telegraf_snmp" ]

  ## The value of this tag will be used to determine the database.  If this
  ## tag is not set the 'database' option is used as the default.
  # database_tag = ""

  ## If true, the 'database_tag' will not be included in the written metric.
  # exclude_database_tag = false

  ## If true, no CREATE DATABASE queries will be sent.  Set to true when using
  ## Telegraf with a user without permissions to create databases or when the
  ## database already exists.
  # skip_database_creation = false

  ## Name of existing retention policy to write to.  Empty string writes to
  ## the default retention policy.  Only takes effect when using HTTP.
  # retention_policy = ""

  ## The value of this tag will be used to determine the retention policy.  If this
  ## tag is not set the 'retention_policy' option is used as the default.
  # retention_policy_tag = ""

  ## If true, the 'retention_policy_tag' will not be included in the written metric.
  # exclude_retention_policy_tag = false

  ## Write consistency (clusters only), can be: "any", "one", "quorum", "all".
  ## Only takes effect when using HTTP.
  # write_consistency = "any"

  ## Timeout for HTTP messages.
  # timeout = "5s"

  ## HTTP Basic Auth
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"

  ## HTTP User-Agent
  # user_agent = "telegraf"

  ## UDP payload size is the maximum packet size to send.
  # udp_payload = "512B"

  ## Optional TLS Config for use on HTTP connections.
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"

  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "gzip"

  ## When true, Telegraf will output unsigned integers as unsigned values,
  ## i.e.: "42u".  You will need a version of InfluxDB supporting unsigned
  ## integer values.  Enabling this option will result in field type errors if
  ## existing data has been written.
  # influx_uint_support = false


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################


[[inputs.snmp]]
  # List of agents to poll
  agents = [ "usg" ]
  # Polling interval
  interval = "60s"
  # Timeout for each SNMP query.
  timeout = "10s"
  # Number of retries to attempt within timeout.
  retries = 3
  # SNMP version, UAP only supports v1
  version = 2
  # Path to mib files
  path = ["/usr/share/snmp/mibs"]
  # SNMP community string.
  community = "public"
  # The GETBULK max-repetitions parameter
  max_repetitions = 10
  # Measurement name
  name = "snmp.USG"

  ##
  ## System Details
  ##
  #  System uptime
  [[inputs.snmp.field]]
    name = "sysUpTime"
    oid = "RFC1213-MIB::sysUpTime.0"
  # Load averages
  [[inputs.snmp.field]]
   name = "loadAverage1"
   oid = "UCD-SNMP-MIB::laLoad.1"
  [[inputs.snmp.field]]
   name = "loadAverage5"
   oid = "UCD-SNMP-MIB::laLoad.2"
  [[inputs.snmp.field]]
   name = "loadAverage15"
   oid = "UCD-SNMP-MIB::laLoad.3"

  ##
  ## Host Resources
  ##
  #  Total memory
  [[inputs.snmp.field]]
   name = "memTotal"
   oid = "UCD-SNMP-MIB::memTotalReal.0"
  #  Free memory
  [[inputs.snmp.field]]
   name = "memFree"
   oid = "UCD-SNMP-MIB::memTotalFree.0"
  #  Buffer memory
  [[inputs.snmp.field]]
   name = "memBuffer"
   oid = "UCD-SNMP-MIB::memBuffer.0"
  #  Cache memory
  [[inputs.snmp.field]]
   name = "memCached"
   oid = "UCD-SNMP-MIB::memCached.0"

  ##
  ## CPU utilization
  ##
  #  Number of 'ticks' spent on user-level
  [[inputs.snmp.field]]
    name = "ssCpuRawUser"
    oid = "UCD-SNMP-MIB::ssCpuRawUser.0"
  #  Number of 'ticks' spent on reduced-priority
  [[inputs.snmp.field]]
    name = "ssCpuRawNice"
    oid = "UCD-SNMP-MIB::ssCpuRawNice.0"
  #  Number of 'ticks' spent on system-level
  [[inputs.snmp.field]]
    name = "ssCpuRawSystem"
    oid = "UCD-SNMP-MIB::ssCpuRawSystem.0"
  #  Number of 'ticks' spent idle
  [[inputs.snmp.field]]
    name = "ssCpuRawIdle"
    oid = "UCD-SNMP-MIB::ssCpuRawIdle.0"
  #  Number of 'ticks' spent waiting on I/O
  [[inputs.snmp.field]]
    name = "ssCpuRawWait"
    oid = "UCD-SNMP-MIB::ssCpuRawWait.0"
  #  Number of 'ticks' spent in kernel
  [[inputs.snmp.field]]
    name = "ssCpuRawKernel"
    oid = "UCD-SNMP-MIB::ssCpuRawKernel.0"
  #  Number of 'ticks' spent on hardware interrupts
  [[inputs.snmp.field]]
    name = "ssCpuRawInterrupt"
    oid = "UCD-SNMP-MIB::ssCpuRawInterrupt.0"
  #  Number of 'ticks' spent on software interrupts
  [[inputs.snmp.field]]
    name = "ssCpuRawSoftIRQ"
    oid = "UCD-SNMP-MIB::ssCpuRawSoftIRQ.0"

  ##
  ## Interface Details & Metrics
  ##
  #  Per-interface traffic, errors, drops
  [[inputs.snmp.table]]
  oid = "IF-MIB::ifTable"
  [[inputs.snmp.table.field]]
    is_tag = true
    oid = "IF-MIB::ifName"
  #  Per-interface high-capacity (HC) counters
  [[inputs.snmp.table]]
   oid = "IF-MIB::ifXTable"
   [[inputs.snmp.table.field]]
     is_tag = true
     oid = "IF-MIB::ifName"

  ##
  ## IP routing statistics
  ##
  # Number of valid routes discarded
  [[inputs.snmp.field]]
   name = "ipRoutingDiscards"
   oid = "RFC1213-MIB::ipRoutingDiscards.0"
  ##
  ## IP metrics
  ##``
  #  System-wide IP metrics
  [[inputs.snmp.table]]
   index_as_tag = true
   oid = "IP-MIB::ipSystemStatsTable"
  ## 
  ## ICMP Metrics
  ##
  #  ICMP statistics
  [[inputs.snmp.table]]
   index_as_tag = true
   oid = "IP-MIB::icmpStatsTable"
  #  ICMP per-type statistics
  [[inputs.snmp.table]]
   index_as_tag = true
   oid = "IP-MIB::icmpMsgStatsTable"
  ##
  ## UDP statistics
  ##
  #  Datagrams delivered to app
  [[inputs.snmp.field]]
   name = "udpInDatagrams"
   oid = "UDP-MIB::udpInDatagrams.0"
  #  Datagrams received with no app
  [[inputs.snmp.field]]
   name = "udpNoPorts"
   oid = "UDP-MIB::udpNoPorts.0"
  #  Datagrams received with error
  [[inputs.snmp.field]]
   name = "udpInErrors"
   oid = "UDP-MIB::udpInErrors.0"
  #  Datagrams sent
  [[inputs.snmp.field]]
   name = "udpOutDatagrams"
   oid = "UDP-MIB::udpOutDatagrams.0"
  ##
  ## TCP statistics
  ##
  #  Number of CLOSED -> SYN-SENT transitions
  [[inputs.snmp.field]]
   name = "tcpActiveOpens"
   oid = "TCP-MIB::tcpActiveOpens.0"
  #  Number of SYN-RCVD -> LISTEN transitions
  [[inputs.snmp.field]]
   name = "tcpPassiveOpens"
   oid = "TCP-MIB::tcpPassiveOpens.0"
  #  Number of SYN-SENT/RCVD -> CLOSED transitions
  [[inputs.snmp.field]]
   name = "tcpAttemptFails"
   oid = "TCP-MIB::tcpAttemptFails.0"
  #  Number of ESTABLISHED/CLOSE-WAIT -> CLOSED transitions
  [[inputs.snmp.field]]
   name = "tcpEstabResets"
   oid = "TCP-MIB::tcpEstabResets.0"
  #  Number of ESTABLISHED or CLOSE-WAIT
  [[inputs.snmp.field]]
   name = "tcpCurrEstab"
   oid = "TCP-MIB::tcpCurrEstab.0"
  #  Number of segments received
  [[inputs.snmp.field]]
   name = "tcpInSegs"
   oid = "TCP-MIB::tcpInSegs.0"
  #  Number of segments sent
  [[inputs.snmp.field]]
   name = "tcpOutSegs"
   oid = "TCP-MIB::tcpOutSegs.0"
  #  Number of segments retransmitted
  [[inputs.snmp.field]]
   name = "tcpRetransSegs"
   oid = "TCP-MIB::tcpRetransSegs.0"
  #  Number of segments received with error
  [[inputs.snmp.field]]
   name = "tcpInErrs"
   oid = "TCP-MIB::tcpInErrs.0"
  #  Number of segments sent w/RST
  [[inputs.snmp.field]]
   name = "tcpOutRsts"
   oid = "TCP-MIB::tcpOutRsts.0"
  [inputs.snmp.tags]
    influx_database = "telegraf_snmp"



[[inputs.snmp]]
  # List of agents to poll
  agents = [ "uap" ]
  # Polling interval
  interval = "60s"
  # Timeout for each SNMP query.
  timeout = "10s"
  # Number of retries to attempt within timeout.
  retries = 3
  # SNMP version, UAP only supports v1
  version = 2
  # Path to mib files
  path = ["/usr/share/snmp/mibs"]
  # SNMP community string.
  community = "public"
  # The GETBULK max-repetitions parameter
  max_repetitions = 10
  # Measurement name
  name = "snmp.UAP"

  ##
  ## System Details
  ##
  #  System uptime
  [[inputs.snmp.field]]
    name = "sysUpTime"
    oid = "RFC1213-MIB::sysUpTime.0"
  # Load averages
  [[inputs.snmp.field]]
   name = "loadAverage1"
   oid = "UCD-SNMP-MIB::laLoad.1"
  [[inputs.snmp.field]]
   name = "loadAverage5"
   oid = "UCD-SNMP-MIB::laLoad.2"
  [[inputs.snmp.field]]
   name = "loadAverage15"
   oid = "UCD-SNMP-MIB::laLoad.3"

  ##
  ## Host Resources
  ##
  #  Total memory
  [[inputs.snmp.field]]
   name = "memTotal"
   oid = "UCD-SNMP-MIB::memTotalReal.0"
  #  Free memory
  [[inputs.snmp.field]]
   name = "memFree"
   oid = "UCD-SNMP-MIB::memTotalFree.0"
  #  Buffer memory
  [[inputs.snmp.field]]
   name = "memBuffer"
   oid = "UCD-SNMP-MIB::memBuffer.0"
  #  Cache memory
  [[inputs.snmp.field]]
   name = "memCached"
   oid = "UCD-SNMP-MIB::memCached.0"

  ##
  ## Interface Details & Metrics
  ##
  #  Per-interface traffic, errors, drops
  [[inputs.snmp.table]]
  oid = "IF-MIB::ifTable"
  [[inputs.snmp.table.field]]
    is_tag = true
    oid = "IF-MIB::ifName"
  #  Per-interface high-capacity (HC) counters
  [[inputs.snmp.table]]
   oid = "IF-MIB::ifXTable"
   [[inputs.snmp.table.field]]
     is_tag = true
     oid = "IF-MIB::ifName"
  #  Wireless interfaces
  [[inputs.snmp.table]]
   oid = "UBNT-UniFi-MIB::unifiRadioTable"
   [[inputs.snmp.table.field]]
     is_tag = true
     oid = "UBNT-UniFi-MIB::unifiRadioName"
   [[inputs.snmp.table.field]]
     is_tag = true
     oid = "UBNT-UniFi-MIB::unifiRadioRadio"
  #  BSS instances
  [[inputs.snmp.table]]
   oid = "UBNT-UniFi-MIB::unifiVapTable"
   [[inputs.snmp.table.field]]
     is_tag = true
     oid = "UBNT-UniFi-MIB::unifiVapName"
   [[inputs.snmp.table.field]]
     is_tag = true
     oid = "UBNT-UniFi-MIB::unifiVapRadio"
  #  Ethernet interfaces
  [[inputs.snmp.table]]
   oid = "UBNT-UniFi-MIB::unifiIfTable"
   [[inputs.snmp.table.field]]
     is_tag = true
     oid = "UBNT-UniFi-MIB::unifiIfName"
  [inputs.snmp.tags]
    influx_database = "telegraf_snmp"



[[inputs.snmp]]
  # List of agents to poll
  agents = [ "usw" ]
  # Polling interval
  interval = "60s"
  # Timeout for each SNMP query.
  timeout = "10s"
  # Number of retries to attempt within timeout.
  retries = 3
  # SNMP version, UAP only supports v1
  version = 2
  # Path to mib files
  path = ["/usr/share/snmp/mibs"]
  # SNMP community string.
  community = "public"
  # The GETBULK max-repetitions parameter
  max_repetitions = 10
  # Measurement name
  name = "snmp.USW"

  ##
  ## System Details
  ##
  #  System uptime
  [[inputs.snmp.field]]
    name = "sysUpTime"
    oid = "RFC1213-MIB::sysUpTime.0"

  ##
  ## Interface Details & Metrics
  ##
  #  Per-interface traffic, errors, drops
  [[inputs.snmp.table]]
  oid = "IF-MIB::ifTable"
  [[inputs.snmp.table.field]]
    is_tag = true
    oid = "IF-MIB::ifName"
  #  Per-interface high-capacity (HC) counters
  [[inputs.snmp.table]]
   oid = "IF-MIB::ifXTable"
   [[inputs.snmp.table.field]]
     is_tag = true
     oid = "IF-MIB::ifName"
  [inputs.snmp.tags]
    influx_database = "telegraf_snmp"
